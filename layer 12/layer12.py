# -*- coding: utf-8 -*-
"""layer12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uyHU42_wjiEZKPH9eXyb7p-6nJt_FJS8
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.decomposition import PCA
from sklearn.feature_selection import SelectKBest, f_classif, chi2
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

#functions to predict and check accuray

def predictAndGetAccuracyScore(model, x_valid, y_valid):
    y_pred = model.predict(x_valid)
    accuracy = accuracy_score(y_valid, y_pred)
    print("Accuracy: %.2f%%" % (accuracy * 100.0))
    return accuracy

#functions to execute halving grid search

def getHalvingGrid(model, param_grid, x_train, y_train):
    search = enable_halving_search_cv(
        model, param_grid, cv=5, factor=2, verbose=2, n_jobs=-1)

    search.fit(x_train, y_train)
    print("Best Hyperparameters:", search.best_params_)
    return search

#function to execute cross validation
def crossVal(model, x_train, y_train):
    kf = KFold(n_splits=2, shuffle=True, random_state=42)

    # Perform cross-validation and calculate the mean accuracy
    scores = cross_val_score(model, x_train, y_train, cv=kf)
    mean_accuracy = scores.mean()
    print("Mean Accuracy: {:.2f}%".format(mean_accuracy * 100))
    return mean_accuracy

train_data = pd.read_csv('train.csv')
valid_data = pd.read_csv('valid.csv')
test_data = pd.read_csv('test.csv')

X_train = train_data.drop(columns=["label_1", "label_2", "label_3", "label_4"])
y_test_train = train_data["label_1"]

X_valid = valid_data.drop(columns=["label_1", "label_2", "label_3", "label_4"])
Y_valid = valid_data["label_1"]

X_test = valid_data.drop(columns=["label_1", "label_2", "label_3", "label_4"])
Y_test = valid_data["label_1"]

#create separate dataframes for each label

x_train = {}
x_valid = {}
y_train = {}
y_valid = {}
x_test = {}
y_test = {}
Labels = ["label_1", "label_2", "label_3", "label_4"]
Features = np.array(train_data.drop(columns=["label_1", "label_2", "label_3", "label_4"]).columns)

for label in Labels:
  tr_data = train_data[train_data["label_2"].notna()] if label == "label_2" else train_data
  vl_data = valid_data[valid_data["label_2"].notna()] if label == "label_2" else valid_data

  #standardize data
  scaler = StandardScaler()

  x_train[label] = pd.DataFrame(scaler.fit_transform(tr_data.drop(Labels, axis=1)), columns=Features)
  y_train[label] = tr_data[label]
  x_valid[label] = pd.DataFrame(scaler.transform(vl_data.drop(Labels, axis=1)), columns=Features)
  y_valid[label] = vl_data[label]
  x_test[label] = pd.DataFrame(scaler.transform(test_data.drop(["ID"], axis=1)), columns=Features)

"""<h4>Label 1</h4>"""

###### Initial model
svm_model_1 = SVC()

#Initial accracy with cross validation
crossVal(svm_model_1, x_train["label_1"], y_train["label_1"])

#Apply PCA -Feature Extraction
pca_label_1 = PCA(n_components=0.99, svd_solver="full")
pca_label_1.fit(x_train["label_1"])
x_train_label_1_PCA = pd.DataFrame(pca_label_1.transform(x_train["label_1"]))
print(x_train_label_1_PCA.shape)
x_valid_label_1_PCA = pd.DataFrame(pca_label_1.transform(x_valid["label_1"]))

#Accuracy after PCA with cross validation
crossVal(svm_model_1, x_train_label_1_PCA, y_train["label_1"])

#Applied manual tuning and found best parameters for SVM
#Initialized model with tuned parameters
svm_model_tuned_1 = SVC(kernel="rbf", C=100, gamma=0.001)

#Accuracy after tuning with cross validation without pca
crossVal(svm_model_tuned_1, x_train["label_1"], y_train["label_1"])

#predict test data with tuned model without pca
svm_model_tuned_1.fit(x_train["label_1"], y_train["label_1"])
y_pred_label_1 = svm_model_tuned_1.predict(x_test["label_1"])

result_df = pd.DataFrame({'ID': test_data['ID'], 'label_1': y_pred_label_1})

"""<h4>Label 2</h4>"""

#Initial accracy with cross validation
svm_model_2 = SVC()
crossVal(svm_model_2, x_train["label_1"], y_train["label_1"])

#Apply PCA -Feature Extraction
pca_label_2 = PCA(n_components=0.99, svd_solver="full")
pca_label_2.fit(x_train["label_2"])
x_train_label_2_PCA = pd.DataFrame(pca_label_2.transform(x_train["label_2"]))
print(x_train_label_2_PCA.shape)
x_valid_label_2_PCA = pd.DataFrame(pca_label_2.transform(x_valid["label_2"]))

#Accuracy after PCA with cross validation
crossVal(svm_model_2, x_train_label_2_PCA, y_train["label_2"])

#Applied manual tuning and found best parameters for SVM
#Initialized model with tuned parameters
svm_model_2_tuned = SVC(kernel="rbf", C=100, gamma=0.001)

#Accuracy after tuning with cross validation without pca
crossVal(svm_model_2_tuned, x_train["label_2"], y_train["label_2"])

#predict test data with tuned model without pca
svm_model_2_tuned.fit(x_train["label_2"], y_train["label_2"])
y_pred_label_2 = svm_model_2_tuned.predict(x_test["label_2"])

result_df['label_2'] = y_pred_label_2

"""<h4>Label 3</h4>"""

svm_model_3 = SVC()

#Initial accracy with cross validation

crossVal(svm_model_3, x_train["label_3"], y_train["label_3"])

#Apply PCA - Feature Extraction
pca_label_3 = PCA(n_components=0.99, svd_solver="full")
pca_label_3.fit(x_train["label_3"])
x_train_label_3_PCA = pd.DataFrame(pca_label_3.transform(x_train["label_3"]))
print(x_train_label_3_PCA.shape)
x_valid_label_3_PCA = pd.DataFrame(pca_label_3.transform(x_valid["label_3"]))

#Accuracy after PCA with cross validation

crossVal(svm_model_3, x_train_label_3_PCA, y_train["label_3"])

#Applied manual tuning and found best parameters for SVM
#Initialed model with tuned parameters
svm_model_3_tuned = SVC(kernel='rbf', C=100, gamma=0.001)
svm_model_3_tuned.fit(x_train["label_3"], y_train["label_3"])

#predict test data with tuned model without pca
y_pred_label_3 = svm_model_3_tuned.predict(x_test["label_3"])

result_df['label_3'] = y_pred_label_3

"""<h4>Label 4</h4>"""

###### Initial accuracy with svm_model
svm_model_4 = SVC()

#Initial accracy with cross validation
crossVal(svm_model_4, x_train["label_4"], y_train["label_4"])

#Apply PCA -Feature Extraction
pca_label_4 = PCA(n_components=0.96, svd_solver="full")
pca_label_4.fit(x_train["label_4"])
x_train_label_4_PCA = pd.DataFrame(pca_label_4.transform(x_train["label_4"]))
print(x_train_label_4_PCA.shape)
x_valid_label_4_PCA = pd.DataFrame(pca_label_4.transform(x_valid["label_4"]))

#Accuracy after PCA with cross validation
crossVal(svm_model_3, x_train_label_4_PCA, y_train["label_4"])

#Applied manual tuning and found best parameters for SVM
#Initialed model with tuned parameters
svm_model_4_tuned = SVC(kernel='rbf', C=100, gamma=0.001)
svm_model_4_tuned.fit(x_train["label_4"], y_train["label_4"])

#predict test data with tuned model without pca
y_pred_label_4 = svm_model_4_tuned.predict(x_test["label_4"])

result_df['label_4'] = y_pred_label_4

result_df.to_csv("solutions.csv", index=False)